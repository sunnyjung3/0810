
		// TODO Auto-generated method stub

/* 가정
우리는 게임개발회사에 입사했다.
우리에게는 성격좋은 사수 한명이 있다.
내가 개발할 게임은 오리시뮬레이션 게임이다.
선임이 나의 개발을 도와주진 않지만 조언은 해준다.
*/

/* 요구사항
- D1 요구 : 오리를 생성하고 날게하시오.
*/
	
public class Ex_2 {
  public static void main(String[] args) {
    오리 a오리 = new 오리();
    a오리.날다();
    a오리.헤엄치다();
    // 출력 : 오리가 날개로 날아갑니다.
    // 출력 : 오리가 오리발로 헤엄칩니다.
    
    청둥오리 a청둥오리 = new 청둥오리();
    a청둥오리.날다();
    a청둥오리.헤엄치다();
    // 출력 : 오리가 날개로 날아갑니다.
    // 출력 : 오리가 오리발로 헤엄칩니다.
    
    흰오리 a흰오리 = new 흰오리();
    a흰오리.날다();
    a흰오리.헤엄치다();
    // 출력 : 오리가 날개로 날아갑니다.
    // 출력 : 오리가 오리발로 헤엄칩니다.
    
    고무오리 a고무오리 = new 고무오리();
    a고무오리.날다();
    a고무오리.헤엄치다();
    // 출력 : 저는 날 수 없어요. ㅜㅠ
    // 출력 : 오리가 둥둥 떠다닙니다.
    
    아수라오리 a아수라오리 = new 아수라오리();
    a아수라오리.날다();
    a아수라오리.헤엄치다();
    // 출력 : 오리가 날개로 날아갑니다.
    // 출력 : 오리가 둥둥 떠다닙니다.
    
  }
}

// 중복된 코드 없애기(상속)
class 오리 {
	void 날다() {
		System.out.println("오리가 날개로 날아갑니다.");	
	}
	void 헤엄치다() {
		System.out.println("오리가 오리발로 헤엄칩니다.");	
	}
}
class 청둥오리 extends 오리 {
		
}

class 흰오리 extends 오리{
		
}

class 고무오리 extends 오리 {   
	// 오버라이딩;메서드 재정의 => 다성형 : 이미 날다라는 메서드가 오리쪽에서만들어졌는데 고무오리 쪽에서
	// 한번더 만들어졌어도 고무외 쪽에서의 메서드로 실행이 된다.  고무오리는 쪽에서 가까운 메서드를 먼저사용
	void 날다() {
		System.out.println("저는 날 수 없어요. ㅜㅠ");
	}
	void 헤엄치다() {
		System.out.println("오리가 둥둥 떠다닙니다");
	}
}

// 상속 => 클래스의 확장, 코드의 재활용X      (A=B 라는 명제가 성립해야합 ex) class사람(a) extends동물(b)

class 아수라오리 extends 고무오리{ //  다중상속은 자바에서 안됨 /죽음의 다이아몬드
	void 날다() {
		System.out.println("오리가 날개로 날아갑니다.");	
	}
	
}